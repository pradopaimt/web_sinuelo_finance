*** Begin Patch
*** Update File: index.html
@@ <section id="demo" class="card" style="display:none">
-      <div class="row cols-3">
+      <div class="row cols-3">
@@
         <div>
           <label>Área Total da Fazenda (ha)</label>
           <input type="number" id="areaTotal" min="0" step="0.01" />
         </div>
       </div>
+      <!-- Centro de Custo selector: permite filtrar um único centro ou ver todos -->
+      <div class="row cols-3" style="margin-top:8px">
+        <div>
+          <label>Centro de Custo</label>
+          <select id="demoCentro">
+            <option value="Todos">Todos</option>
+            <!-- opções adicionais serão preenchidas via JS -->
+          </select>
+        </div>
+      </div>
-      <div style="overflow:auto; margin-top:12px">
-        <table id="tabDemo">
-          <thead><tr><th>Centro</th><th>Área (ha)</th><th>Receitas</th><th>Despesas</th><th>Saldo</th></tr></thead>
-          <tbody></tbody>
-        </table>
-      </div>
+      <div style="overflow:auto; margin-top:12px">
+        <table id="tabDemo">
+          <!-- O cabeçalho será preenchido dinamicamente com os meses e a coluna Total -->
+          <thead><tr id="demoHeader"></tr></thead>
+          <tbody></tbody>
+        </table>
+      </div>
*** End Patch
*** End Patch
*** Begin Patch
*** Update File: index.html
@@
-    // ===== Demo: rateio do Geral =====
-    const demoMes=document.getElementById('demoMes'); demoMes.addEventListener('input', renderDemo);
-    document.getElementById('areaTotal').addEventListener('input', (e)=>{ state.areaTotal = Number(e.target.value)||0; persist(); renderDemo(); });
-    function renderDemo(){ const tbody=document.querySelector('#tabDemo tbody'); tbody.innerHTML=''; const ym = demoMes.value || new Date().toISOString().slice(0,7); const arr = state.lanc.filter(x=> x.data?.startsWith(ym));
-      const centers = state.centros.map(c=> ({...c}));
-      const totals = arr.reduce((acc,x)=>{ const c=x.centro||'Geral'; if(!acc[c]) acc[c]={rec:0,desp:0}; if(x.natureza==='RO'||x.natureza==='RNO') acc[c].rec += x.valor; else acc[c].desp += x.valor; return acc; },{});
-      const geral = totals['Geral'] || {rec:0, desp:0};
-      const base = centers.filter(c=> c.nome!=='Geral' && c.area>0);
-      const somaArea = base.reduce((s,c)=> s+c.area,0) || 0;
-      centers.forEach(c=>{
-        const own = totals[c.nome] || {rec:0, desp:0};
-        let rec = own.rec, desp = own.desp;
-        if(c.nome!=='Geral' && somaArea>0){ const share = c.area / somaArea; rec += geral.rec * share; desp += geral.desp * share; }
-        const tr=document.createElement('tr'); tr.innerHTML=`<td>${c.nome}</td><td>${(c.area||0).toLocaleString('pt-BR')}</td><td>${BRL.format(rec)}</td><td>${BRL.format(desp)}</td><td style='font-weight:700'>${BRL.format(rec-desp)}</td>`; tbody.appendChild(tr);
-      });
-    }
+    // ===== Demo: Safra/Ano com centro de custo e IR =====
+    // Preenche o seletor de centro de custo do demonstrativo
+    function fillDemoCentro(){
+      const sel=document.getElementById('demoCentro');
+      if(!sel) return;
+      sel.innerHTML='';
+      const optAll=document.createElement('option');
+      optAll.value='Todos';
+      optAll.textContent='Todos';
+      sel.appendChild(optAll);
+      state.centros.forEach(c=>{
+        const o=document.createElement('option');
+        o.value=c.nome;
+        o.textContent=c.nome;
+        sel.appendChild(o);
+      });
+    }
+    // Reimplementa renderDemo para gerar colunas mensais e total
+    function renderDemo(){
+      const tbody=document.querySelector('#tabDemo tbody');
+      const thead=document.getElementById('demoHeader');
+      tbody.innerHTML='';
+      thead.innerHTML='';
+      const {start,end,irOnly} = currentPeriod();
+      // monta array de meses entre start e end (inclui início e fim)
+      const months=[];
+      let d=new Date(start+'T00:00:00'); d.setDate(1);
+      const endDate=new Date(end+'T00:00:00'); endDate.setDate(1);
+      while(d<=endDate){ months.push(new Date(d)); d.setMonth(d.getMonth()+1); }
+      // cabeçalho dinâmico
+      const monthNames=['Jan','Fev','Mar','Abr','Mai','Jun','Jul','Ago','Set','Out','Nov','Dez'];
+      let headerHtml='<th>Centro</th>';
+      months.forEach(m => {
+        headerHtml += '<th>'+monthNames[m.getMonth()]+'/'+String(m.getFullYear()).slice(-2)+'</th>';
+      });
+      headerHtml += '<th>Total</th>';
+      thead.innerHTML=headerHtml;
+      // filtra lançamentos do período
+      let arr=state.lanc.filter(x=> x.data && x.data>=start && x.data<=end);
+      if(irOnly){ arr=arr.filter(x=> x.ir===true); }
+      const centroSel=document.getElementById('demoCentro')?.value || 'Todos';
+      const centres=(centroSel==='Todos') ? state.centros.map(c=> c.nome) : [centroSel];
+      centres.forEach(nomeCentro => {
+        let totalNet=0;
+        let rowHtml='<td>'+nomeCentro+'</td>';
+        months.forEach(md => {
+          const ym=md.toISOString().slice(0,7);
+          let rec=0, desp=0;
+          arr.forEach(x => {
+            const cName=x.centro || 'Geral';
+            if(cName===nomeCentro && x.data.startsWith(ym)){
+              if(x.natureza==='RO' || x.natureza==='RNO') rec+=x.valor;
+              else desp+=x.valor;
+            }
+          });
+          const net=rec-desp;
+          totalNet+=net;
+          rowHtml += '<td>'+BRL.format(net)+'</td>';
+        });
+        rowHtml += '<td style="font-weight:700">'+BRL.format(totalNet)+'</td>';
+        tbody.innerHTML += '<tr>'+rowHtml+'</tr>';
+      });
+    }
+    // Atualiza demonstrativo quando a área total é alterada
+    document.getElementById('areaTotal').addEventListener('input', (e)=>{
+      state.areaTotal=Number(e.target.value)||0;
+      persist();
+      renderDemo();
+    });
+    // Atualiza demonstrativo quando o centro de custo muda
+    document.getElementById('demoCentro')?.addEventListener('change', renderDemo);
*** End Patch
*** End Patch
*** Begin Patch
*** Update File: index.html
@@ // ===== Inicialização =====
-    fillNatureza(); fillContas(); fillCentros(); updateKPIs(); renderPlanoContas(); renderCentros();
+    fillNatureza();
+    fillContas();
+    fillCentros();
+    fillDemoCentro();
+    updateKPIs();
+    renderPlanoContas();
+    renderCentros();
*** End Patch
*** End Patch
